# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?


# sieve[15] = (3, 5)
# sieve[5] = (5, 1)
# therefore 15 = 3^1*5^1 -> divisors(15) = (1+1)*(1+1)

sieve = {}

def build_sieve_for(n):
  if n in sieve:
    return
  
  div = 2
  while div * div <= n:
    while n % div == 0:
      sieve[n] = (div, n // div)
      n // div

      if n in sieve:
        return

    div += 1

  if n > 1:
    sieve[n] = (n, 1)

def count_divisors(n):
  if n == 1:
    return 1

  build_sieve_for(n)

  factors = {}
  ptr = n

  while ptr != 1:
    ptr_dir = sieve[ptr]
    if ptr_dir[0] not in factors:
      factors[ptr_dir[0]] = 1
    else:
      factors[ptr_dir[0]] += 1

    ptr = ptr_dir[1]

  divisors = 1
  for exp in factors.values():
    divisors *= exp + 1

  return divisors

if __name__ == "__main__":
  n = 0

  while True:
    n += 1
    if n % 2 == 0:
      triangle_divisors = count_divisors(n // 2) * count_divisors(n + 1)
    else:
      triangle_divisors = count_divisors(n) * count_divisors((n + 1) // 2)

    if triangle_divisors > 500:
      print(n*(n+1)//2)
      break
